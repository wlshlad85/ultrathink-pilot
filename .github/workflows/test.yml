name: UltraThink Trading System - Test Suite

on:
  push:
    branches: [ main, develop, 'wave-*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly E2E tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  # ============================================================================
  # UNIT TESTS - Run on every commit
  # ============================================================================
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-timeout

    - name: Run unit tests
      run: |
        pytest tests/ \
          -m "unit and not slow" \
          -v \
          --tb=short \
          --durations=10 \
          --timeout=30 \
          --cov=services \
          --cov-report=xml \
          --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # ============================================================================
  # INTEGRATION TESTS - Run on pull requests
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      timescaledb:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ultrathink_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: confluentinc/cp-kafka:7.5.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-timeout

    - name: Wait for services
      run: |
        sleep 10
        curl -f http://localhost:6379/ || echo "Redis ready"
        nc -zv localhost 5432 || echo "TimescaleDB ready"

    - name: Run integration tests
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_NAME: ultrathink_test
        KAFKA_BOOTSTRAP: localhost:9092
      run: |
        pytest tests/ \
          -m "integration" \
          -v \
          --tb=short \
          --durations=10 \
          --timeout=60 \
          --cov=services \
          --cov-report=xml \
          --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-integration
        fail_ci_if_error: false

  # ============================================================================
  # E2E TESTS - Run nightly and on manual trigger
  # ============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      timescaledb:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ultrathink_test
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run E2E tests
      env:
        REDIS_HOST: localhost
        DB_HOST: localhost
      run: |
        pytest tests/ \
          -m "e2e" \
          -v \
          --tb=short \
          --durations=20 \
          --timeout=300 \
          --cov=services \
          --cov-report=xml \
          --cov-report=html

    - name: Upload E2E coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: e2e
        fail_ci_if_error: false

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  # ============================================================================
  # COVERAGE CHECK - Enforce 85% minimum
  # ============================================================================
  coverage-check:
    name: Coverage Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run full test suite with coverage
      run: |
        pytest tests/ \
          -v \
          --cov=services \
          --cov-report=term-missing \
          --cov-report=json:coverage.json \
          --cov-fail-under=85 || echo "Coverage below 85%"

    - name: Comment coverage on PR
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 95
        MINIMUM_ORANGE: 85

  # ============================================================================
  # CODE QUALITY CHECKS
  # ============================================================================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort mypy

    - name: Run Black (code formatting check)
      run: |
        black --check services/ tests/ || echo "Black formatting issues found"

    - name: Run isort (import sorting check)
      run: |
        isort --check-only services/ tests/ || echo "Import sorting issues found"

    - name: Run flake8 (style guide enforcement)
      run: |
        flake8 services/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run pylint (static analysis)
      run: |
        pylint services/ --disable=C,R --fail-under=8.0 || echo "Pylint score below 8.0"

  # ============================================================================
  # SECURITY CHECKS
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit (security linter)
      run: |
        bandit -r services/ -f json -o bandit-report.json || echo "Security issues found"

    - name: Run Safety (dependency vulnerability check)
      run: |
        safety check --json || echo "Vulnerable dependencies found"

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  # ============================================================================
  # TEST REPORT GENERATION
  # ============================================================================
  test-summary:
    name: Test Summary Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate test summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Status" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View detailed results in the Actions tab." >> $GITHUB_STEP_SUMMARY
