[pytest]
# Pytest Configuration for UltraThink Trading System
# Wave 1 QA Testing Engineer - Agent 4

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = tests

# Console output options
addopts =
    # Verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Show summary of all test outcomes
    -ra
    # Show warnings
    -W default
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Coverage options
    --cov=services
    --cov=scripts
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=json:coverage.json
    # Minimum coverage threshold (85% target)
    --cov-fail-under=85
    # Performance: run tests in parallel (optional, uncomment if pytest-xdist installed)
    # -n auto

# Custom markers for test categorization
markers =
    asyncio: Async tests using asyncio
    unit: Unit tests for individual components
    integration: Integration tests across services
    e2e: End-to-end trading flow tests
    slow: Tests that take longer than 1 second
    kafka: Tests requiring Kafka infrastructure
    redis: Tests requiring Redis infrastructure
    timescaledb: Tests requiring TimescaleDB
    gpu: Tests requiring GPU resources
    critical_path: Tests for critical trading decision flow (95% coverage target)
    regime_detection: Tests for regime detection service
    risk_manager: Tests for risk management service
    inference_api: Tests for inference service
    wave1: Wave 1 implementation tests
    wave2: Wave 2 implementation tests
    wave3: Wave 3 implementation tests

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = services,scripts
omit =
    */tests/*
    */__pycache__/*
    */venv/*
    */.venv/*
    */site-packages/*
    */dist-packages/*

[coverage:report]
# Report configuration
precision = 2
show_missing = true
skip_covered = false

# Exclude lines from coverage
exclude_lines =
    # Standard pragma
    pragma: no cover
    # Debug code
    def __repr__
    # Abstract methods
    raise AssertionError
    raise NotImplementedError
    # Type checking code
    if TYPE_CHECKING:
    @overload
    # Non-runnable code
    if __name__ == .__main__.:
    # Defensive programming
    pass

[coverage:html]
directory = htmlcov
title = UltraThink Trading System - Test Coverage Report

[coverage:json]
output = coverage.json
pretty_print = true
[tool.pytest.ini_options]
